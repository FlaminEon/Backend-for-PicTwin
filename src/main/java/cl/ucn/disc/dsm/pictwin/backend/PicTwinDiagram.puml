@startuml
'https://plantuml.com/sequence-diagram
left to right direction

package cl.ucn.disc.dsm.pictwin.backend.model {
    class User{
        -id: Long
        -email: String
        -password: String
        -strikes: Integer

        +User(...)
        +getId(): Long
        +getEmail(): String
        +getPassword(): String
        +getStrikes(): Integer
        +incrementStrikes(): Integer
        +getState(): State
        +getTwins(): List<Twin>
    }

    class Twin{
        -id: Long
        -dislike: boolean

        +Twin(...)
        +getId(): Long
        +getDislike(): boolean
        +setDislike(): void
        +getMy(): Pic
        +getYours(): Pic
    }

    class Pic{
        -id: Long
        -timestamp: ZonedDateTime
        -dislikes: Integer
        -latitude: Double
        -longitude: Double
        -error: Double
        -views: Integer
        -name: String
        -picture: byte[]

        +Pic(...)
        +getId(): Long
        +getTimestamp(): ZonedDateTime
        +getDislikes(): Integer
        +incrementDislikes(): Integer
        +getLatitude(): Double
        +getLongitude(): Double
        +getError(): Double
        +getViews(): Integer
        +incrementViews(): Integer
        +getName(): String
        +getPicture(): byte[]
        +getOwner(): User
    }

    enum State{
        ACTIVE
        BANNED
    }
}

package org.springframework.data.repository {
    interface ListCrudRepository<T, ID>{}

    interface CrudRepository<T, ID>{}
}

package cl.ucn.disc.dsm.pictwin.backend.services {
    interface PicTwin{
        +create(user:User, password:String): User
        +authenticate(email:String, password:String): User
        +createTwin(pic:Pic, idUser:Long): Twin
        +dislike(idTwin:Long, idUser:Long): void
        +getUserSize(): Long
    }

    class PicTwinImpl {
        {static}-PASSWORD_ENCODER: PasswordEncoder
    }
}

package cl.ucn.disc.dsm.pictwin.backend {
    class Utils {
        +printObject(objectName: String, o: Object): void
    }
}

package cl.ucn.disc.dsm.pictwin.backend.dao {
    class DatabaseLoader {
        +DatabaseLoader(UserRepository, TwinRepository, PicRepository)
        +run(String..): void
    }

    interface UserRepository<User, Long> {}
    interface PicRepository<Pic, Long> {}
    interface TwinRepository<Twin, Long> {}
}

package cl.ucn.disc.dsm.pictwin.backend.web {
    class PicTwinRestController {
            +PicTwinRestController(picTwin: PicTwin)
            +create(user: User, password: String): User
            +authenticate(email:String, password: String): User
            +createTwin(pic: Pic, idUser: Long): Twin
            +dislike(idTwin: Long, idUser: Long): void
    }

    class BackendApplication {
        {static}+main(args[]: String): void
    }
}

User --> "1" State : -state: State
User --> "*" Twin : -twins: List<Twins>

Twin --> "1" Pic : -yours: Pic
Twin --> "1" Pic : -my: Pic

Pic --> User : -owner: User

ListCrudRepository -|> CrudRepository

DatabaseLoader --> PicTwin : -picTwin: PicTwin
DatabaseLoader --> Utils : <<use>>

UserRepository -|> ListCrudRepository
PicRepository -|> ListCrudRepository
TwinRepository -|> ListCrudRepository

PicTwinRestController --> "1" PicTwin : -picTwin: PicTwin

PicTwinImpl --> "1" UserRepository : userRepo
PicTwinImpl --> "1" PicRepository : picRepo
PicTwinImpl --> "1" TwinRepository : twinRepo
PicTwinImpl .|> PicTwin

PicTwin ..> User : <<use>>
PicTwin ..> Pic : <<use>>
PicTwin ..> Twin : <<use>>

BackendApplication ..> PicTwinRestController : <<use>>

@enduml